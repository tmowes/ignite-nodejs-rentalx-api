import { inject, injectable } from 'tsyringe'

import AppError from '../../../../errors/AppError'
import { {{pascalCase name}}DTO } from '../../dtos/{{pascalCase name}}DTO'
import { {{pascalCase entity}} } from "../../entities/{{pascalCase entity}}"
import { I{{pascalCase repository}}Repository } from "../../repositories/I{{pascalCase repository}}Repository"

@injectable()
export class {{pascalCase name}}UseCase {
constructor(
@inject('{{pascalCase repository}}Repository')
private {{camelCase repository}}Repository: I{{pascalCase repository}}Repository) { }

async execute(data: {{pascalCase name}}DTO): Promise<{{pascalCase entity}} | undefined> {
  const {{camelCase entity}}Exists = await this.{{camelCase repository}}Repository.findByEmail(data.email)

  if ({{camelCase entity}}Exists) {
  throw new AppError('{{pascalCase entity}} already exists!')
  }
  const new{{pascalCase entity}} = this.{{camelCase repository}}Repository.create({...data})
  return new{{pascalCase entity}}
  }
  }
